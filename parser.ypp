%{
    #include <iostream>
    #include <string>
    #include "hw3_output.hpp"
    using namespace std;
    using namespace output;
    extern int yylineno;
    int yylex();
    void yyerror(const char*);
    symbol_tables_stack stack = symbol_tables_stack();
    
%}
%define parse.error verbose;
%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc OVERRIDE;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;

%token V;
%token ERROR;
%nonassoc IF;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;                                                                      
%nonassoc NUM;    
%nonassoc STRING;

%right ASSIGN;

%left OR;
%left AND;


%left EQ_RELOP;
%left RE_RELOP;
%left PM_BINOP;
%left MD_BINOP;

%right NOT;
%left LPAREN;
%left RPAREN;
%nonassoc ELSE;

%%
Program
    : Funcs {
        if (yychar == YYEOF) {
            Stack.validateMainFunction(); Stack.pop_scope();
        }
    }
    ;

Funcs
    : FuncDecl Funcs {/*empty*/}
    |/*epsilon*/ {/*empty*/}
    ;

FuncDecl
    : OverRide RetType ID LPAREN Formals
    { Stack.insert($2.name,($4.type + string("->") + $1.type),false, true, $<intVal>1); 
    Stack.push_scope();}
    RPAREN LBRACE Statements RBRACE {SymbolTable.pop_scope();}
    ;
OverRide
    :/*epsilon*/ {$<numVal>$ = false;}
 }
    | OVERRIDE {$<numVal>$ = true;}
    ;

RetType
    : VOID { $$.type=$1.type } 
    | Type { $$.type=$1.type }
    ;

Formals
    : /*epsilon*/ {$<type>$ = string(""); $<name>$ = string("");  }
    |FormalsList {$<type>$ = $<type>1; $<name>$ = $<name>1;}
    ;

FormalsList
    : FormalDecl {$<type>$ = $<type>1; $<name>$ = $<name>1;}
    | FormalDecl COMMA FormalsList {$$.type = $<type>1 + string(",") + $<type>3;
                                    $$.name = $<name>1 + string(",") + $<name>3;}
    ;
FormalDecl
    : Type ID { $$.type = $1.type ; $$.name = $2.name; }
    ;

Statements
    : Statement {/*empty*/}
    | Statements Statement {/*empty*/}
    ;
Statement 
    : LBRACE {stack.push_scope();} Statements RBRACE {stack.pop_scope();}
    | Type ID SC { stack.insert($<name>2 , $<type>1, false, false, yylineno);}
    | Type ID ASSIGN Exp SC {if(typesDontMatch($1.type, $4.type)) errorMismatch(yylineno); stack.insert($<name>2 , $<type>1, false, false, yylineno); }
    | ID ASSIGN { if(!stack.NameExists($<name>1) || stack.is_func($<name>1)) errorUndef(yylineno, $<name>1);}
     Exp SC { if(!typesDontMatch(SymbolTable.get_type($1.name), $4.type)) errorMismatch(yylineno); }
    | Call SC { /*empty*/ }
    | RETURN SC { if(!voidFunc()) errorMismatch(yylineno); }
    | RETURN Exp SC { if(voidFunc()) errorMismatch(yylineno); }
    | IF LPAREN Exp M RPAREN Statement {if(notBool($<type>3)) errorMismatch;  }
    | IF LPAREN Exp M RPAREN Statement ELSE Statement { if(notBool($<type>3)) errorMismatch; }
    | WHILE {stack.InsetInWhile(true);} LPAREN Exp RPAREN Statement {if(notBool($<type>3)) errorMismatch; stack.InsetInWhile(false);}
    | BREAK SC { if(stack.notInWhile()) errorUnexpectedBreak();}
    | CONTINUE SC { if(stack.notInWhileLoop()) errorUnexpectedContinue();}
    ;

Call
    : ID LPAREN ExpList RPAREN { if(ExpList_not_valid()) errorPrototypeMismatch(); 
    if(!stack.NameExists($<name>1) || !stack.is_func($<name>1)) errorUndefFunc(yylineno, $<name>1);
    $$.name = $1.name; 
    $$.type = Stack.get_func_return_type($1.name);
    }
    | ID LPAREN RPAREN { 
    if(ExpList_not_valid()) errorPrototypeMismatch(); 
    if(!stack.NameExists($<name>1) || !stack.is_func($<name>1)) errorUndefFunc(yylineno, $<name>1);
    $$.name = $1.name; 
    $$.type = Stack.get_func_return_type($1.name);
    }
    ;
    
ExpList
    : Exp {  $$.type = $1.type; }
    | Exp COMMA ExpList { $$.type = $1.type + string(",") + $3.type; }
    ;

Type
    : INT { $$.type = $1.type; }
    | BYTE { $$.type = $1.type; }
    | BOOL { $$.type = $1.type; }
    ;

Exp
    : LPAREN Exp RPAREN {$<type>$ = $<type>2;}
    | Exp MD_BINOP Exp %prec MD_BINOP { if(notIntOrBool($<type>1,$<type>3)) errorMismatch(yylineno); $<type>$ = biggerType($1.type, $3.type); }
    | Exp PM_BINOP Exp %prec PM_BINOP { if(notIntOrBool($<type>1,$<type>3)) errorMismatch(yylineno); $<type>$ = biggerType($1.type, $3.type); }
    | ID {/*if(!stack.NameExists($<name>1) || isFunc($<type>1)) errorUndef(yylineno, $1.name); $<type>$ = $<type>1; */}
    | Call { $<type>$=$<type>1; }
    | NUM { $<type>$=$<type>1; }
    | NUM B {if(byteTooLarge($<numVal>1) errorByteTooLarge(yylineno, $<strVal>1); $<type>$=$<type>1; }
    | STRING { $<type>$=$<type>1; }
    | TRUE { $<type>$=$<type>1; }
    | FALSE { $<type>$=$<type>1; }
    | NOT Exp { if(notBool($<type>2)) errorMismatch(yylineno); $<type>$=$<type>2; }
    | Exp AND Exp { if(notBool($<type>1) || notBool($<type>3)) errorMismatch(yylineno); $<type>$=$<type>1; }
    | Exp OR Exp { if(notBool($<type>1) || notBool($<type>3)) errorMismatch(yylineno); $<type>$=$<type>1; }
    | Exp EQ_RELOP Exp %prec EQ_RELOP {  if(notIntOrBool($<type>1,$<type>3)) errorMismatch(yylineno); $<type>$ = "bool";}
    | Exp RE_RELOP Exp %prec RE_RELOP {  if(notIntOrBool($<type>1,$<type>3)) errorMismatch(yylineno); $<type>$ = "bool";}
    | LPAREN Type RPAREN Exp {if(notIntOrBool($<type>2,$<type>4)) errorMismatch(yylineno);$<type>$ = $<type>2;}
    ;

%%
void yyerror(const char* s ) { errorSyn(yylineno);}

bool notBool(cosnt string type)
{
    if(type==string("bool")) return false;
    return true;
}

bool byteTooLarge(int value)
{
    if(value > 255) return true;
    return false;
}
bool typesDontMatch(const string LHS_type, const string RHS_type)
{
    if (type1!=type2 && (LHS_type != string("int") || RHS_type != string("byte"))
    {
        return true;
    }
    return false;
}

bool notIntOrBool(const char* converter_type, const char* converted_type)
{
    if((converter_type==string("int") && converted_type==string("bool"))
         ||(converter_type==string("bool") && converted_type==string("int"))
         ||(converter_type==string("int") && converted_type==string("int"))
         ||(converter_type==string("bool") && converted_type==string("bool")))
         {
            return false
         }
    return true;
}

bool isFunc(string type)
{
    if(type=="func")
    {
        return true;
    }
    return false;
}

int main()
{
    return yyparse();
}