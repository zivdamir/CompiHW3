%{
    #include "hw3_output.hpp"
    
    #include <iostream>
    #include <cstring>
    #include "symbol_tables_stack.hpp"
    
    extern int yylineno;
    int yylex();
    void yyerror( const char* s);
    
    using namespace output;

    symbol_tables_stack _stack = symbol_tables_stack();
    bool notBool( char* type);
    bool byteTooLarge(int value);
    bool typesDontMatch( char* LHS_type,  char* RHS_type);
    bool notIntOrByte( char* converter_type,  char* converted_type);
    bool isFunc(char* type);
    bool can_type_be_compared(char* t1,char* t2);
    bool expList_not_valid(string func_name, string exp_list);
    bool isVoid();
    char* biggerType(char* first, char* second);
    char* join(char* s1,char* s2);





    
%}
%define parse.error verbose;
%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc OVERRIDE;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;

%token V;
%token ERROR;
%nonassoc IF;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;                                                                      
%nonassoc NUM;    
%nonassoc STRING;

%right ASSIGN;

%left OR;
%left AND;


%left EQ_RELOP;
%left RE_RELOP;
%left PM_BINOP;
%left MD_BINOP;

%right NOT;
%left LPAREN;
%left RPAREN;
%nonassoc ELSE;

%%
Program
    : Funcs {
        if (yychar == YYEOF) {
            _stack.validateMainFunction();
            _stack.pop_scope();
        }
        
    }
    ;

Funcs
    : FuncDecl Funcs {/*empty*/}
    |/*epsilon*/ {/*empty*/}
    ;

FuncDecl
    : OverRide RetType ID {} LPAREN Formals
    { _stack.insert(string($3.name), string(join(join($5.type ,"->"),$2.type)), true, $1.intVal, yylineno);}
    RPAREN LBRACE 
    {_stack.push_scope();_stack.symbol_table_add_function_parameter_entries($5.name, $5.type, yylineno);} 
    Statements RBRACE 
    {_stack.pop_scope();}
    ;
OverRide
    :/*epsilon*/ {$$.intVal = false;}
    | OVERRIDE {$$.intVal = true;}
    ;

RetType
    : VOID { $$.type=$1.type; } 
    | Type { $$.type=$1.type; }
    ;

Formals
    : /*epsilon*/ {$$.type = ""; $$.name = "";  }
    |FormalsList {$$.type = $1.type; $$.name = $1.name;}
    ;

FormalsList
    : FormalDecl {$$.type = $1.type; $$.name = $1.name;}
    | FormalDecl COMMA FormalsList {$$.type = join(join($1.type ,","), $3.type);
                                    $$.name = join(join($1.name ,",") , $3.name);}
    ;
FormalDecl
    : Type ID { $$.type = $1.type ; $$.name = $2.name; }
    ;

Statements
    : Statement {/*empty*/}
    | Statements Statement {/*empty*/}
    ;
Statement 
    : LBRACE {_stack.push_scope();} Statements RBRACE {_stack.pop_scope();}
    | Type ID SC { _stack.insert($2.name , $1.type, false, false, yylineno);}
    | Type ID ASSIGN Exp SC { if(typesDontMatch($1.type, $4.type)) errorMismatch(yylineno); _stack.insert($2.name , $1.type, false, false, yylineno); }
    | ID ASSIGN { if(!_stack.nameExists($1.name) || _stack.isFunc($1.name)) errorUndef(yylineno, $1.name);}
     Exp SC { if(typesDontMatch(_stack.getType($1.name).data(), $4.type)) errorMismatch(yylineno); }
    | Call SC { /*empty*/ }
    | RETURN SC { if(!isVoid()) errorMismatch(yylineno); }
    | RETURN Exp SC { if(isVoid()) errorMismatch(yylineno); }
    | IF NEW_SCOPE_MARKER LPAREN CHECK_TYPE_MARKER RPAREN Statement POP_SCOPE_MARKER 
    | IF NEW_SCOPE_MARKER LPAREN CHECK_TYPE_MARKER RPAREN Statement POP_SCOPE_MARKER ELSE {_stack.push_scope();} Statement {_stack.pop_scope();}
    | WHILE {_stack.push_scope();_stack.updateInWhile(true);} LPAREN Exp RPAREN Statement {if(notBool($3.type)) errorMismatch; _stack.pop_scope();_stack.updateInWhile(false);}
    | BREAK SC { if(!_stack.inWhileLoop()) errorUnexpectedBreak(yylineno);}
    | CONTINUE SC { if(!_stack.inWhileLoop()) {errorUnexpectedContinue(yylineno);}}
    ;

Call
    : ID LPAREN ExpList RPAREN {if(_stack.) errorPrototypeMismatch(yylineno, $1.name); 
    if(!_stack.nameExists($1.name) || !_stack.isFunc($1.name)) errorUndefFunc(yylineno, $1.name);
    $$.name = $1.name; 
    $$.type = _stack.getFuncReturnType($1.name,$3.type).data();
    }
    | ID LPAREN RPAREN { 
    if(expList_not_valid($1.name, "")) errorPrototypeMismatch(yylineno, $1.name); 
    if(!_stack.nameExists($1.name) || !_stack.isFunc($1.name)) errorUndefFunc(yylineno, $1.name);
    $$.name = $1.name; 
    $$.type = _stack.getFunctionreturnType($1.name).data();
    }
    ;
NEW_SCOPE_MARKER 
    : /*epsilon*/{_stack.push_scope();}
    ;
POP_SCOPE_MARKER
    : /*epsilon*/ {_stack.pop_scope();}
    ;
CHECK_TYPE_MARKER
    : Exp {if(notBool($1.type)) errorMismatch(yylineno); }
    ;
ExpList
    : Exp {  $$.type = $1.type; }
    | Exp COMMA ExpList { $$.type = join(join($1.type, ","),$3.type); }
    ;

Type
    : INT { $$.type = $1.type; }
    | BYTE { $$.type = $1.type; }
    | BOOL { $$.type = $1.type; }
    ;

Exp
    : LPAREN Exp RPAREN {$$.type = $2.type;}
    | Exp MD_BINOP Exp %prec MD_BINOP { if(notIntOrByte($1.type,$3.type)) errorMismatch(yylineno); $$.type = biggerType($1.type, $3.type); }
    | Exp PM_BINOP Exp %prec PM_BINOP { if(notIntOrByte($1.type,$3.type)) errorMismatch(yylineno); $$.type = biggerType($1.type, $3.type); }
    | ID {if(!_stack.nameExists($1.name) || isFunc($1.type)) errorUndef(yylineno, $1.name); $$.type = $1.type;}
    | Call { $$.type=$1.type; }
    | NUM { $$.type=$1.type; }
    | NUM B {if(byteTooLarge($1.intVal)) errorByteTooLarge(yylineno, $1.strVal); $$.type=$2.type; }
    | STRING { $$.type=$1.type; }
    | TRUE { $$.type=$1.type; }
    | FALSE { $$.type=$1.type; }
    | NOT Exp { if(notBool($2.type)) errorMismatch(yylineno); $$.type=$2.type; }
    | Exp AND Exp { if(notBool($1.type) || notBool($3.type)) errorMismatch(yylineno); $$.type=$1.type; }
    | Exp OR Exp { if(notBool($1.type) || notBool($3.type)) errorMismatch(yylineno); $$.type=$1.type; }
    | Exp EQ_RELOP Exp %prec EQ_RELOP { if(notIntOrByte($1.type,$3.type)) errorMismatch(yylineno); $$.type = "BOOL";}
    | Exp RE_RELOP Exp %prec RE_RELOP { if(notIntOrByte($1.type,$3.type)) errorMismatch(yylineno); $$.type = "BOOL";}
    | LPAREN Type RPAREN Exp {if(notIntOrByte($2.type,$4.type)) errorMismatch(yylineno); $$.type = $2.type;}
    ;

%%
char* join(char* s1, char* s2)
{
    //printf("in join\n");
    int str_len=strlen(s1)+strlen(s2);
    char* joined_str = (char*)malloc(sizeof(char)*(str_len+1));
    strcpy(joined_str,s1);
    strcat(joined_str,s2);
    //not freeing memory, might be a problem atm.
    //printf("joined finished \n");
   // printf("joined_str: %s\n",joined_str);
    return joined_str;
}

bool notBool( char* type)
{
    return strcmp(type,"BOOL")!=0;
}

bool byteTooLarge(int value)
{
    return value > 255;

}
bool typesDontMatch(  char* LHS_type,  char* RHS_type)
{
    //printf("val:%d\n",strcmp(LHS_type,RHS_type));
    if (strcmp(LHS_type,RHS_type)!=0 && ( (strcmp(LHS_type,"INT")!=0) || (strcmp(RHS_type,"BYTE")!=0) ) )
    {
        return true;
    }
    else
    {
    return false;
    }
}

bool notIntOrByte( char* converter_type,  char* converted_type)
{

    if((strcmp(converter_type,"INT")==0 && strcmp(converted_type,"BYTE")==0)
         ||(strcmp(converter_type,"BYTE")==0 && strcmp(converted_type,"INT")==0)
         ||(strcmp(converter_type,"INT")==0 && strcmp(converted_type,"INT")==0)
         ||(strcmp(converter_type,"BYTE")==0 && strcmp(converted_type,"BYTE")==0))
         {
            return false;
         }
    return true;
}

bool isFunc(char* type)
{
    return strcmp(type,"func")==0;
}

bool expList_not_valid(string func_name, string exp_list)
{
    std::vector<std::string> param_vec;
    string params = _stack.getFunctionParamsTypes(func_name);
    std::cout<<"line number:"<< yylineno << std::endl;
    printf("func_name: %s\n",func_name.data());
    printf("exp_list: %s\n",exp_list.data());
    printf("params: %s\n",params.data());
    //make sure that params get int.
    //typesDontMatch(params.data(),exp_list.data())
    if(typesDontMatch(params.data(),exp_list.data()))//not absolutely correct.
    {
        return true;
    }
    return false;
}


bool isVoid()
{
     string func_ret_type = _stack.getCurrentfunctionreturnType();
     //std::cout<<"isVoid function return type:\n"<<func_ret_type<<endl;
     //convert to char*
    return strcmp(func_ret_type.data(),"VOID")==0;
}


char* biggerType(char* first, char* second)
{

    return strcmp(second,"BYTE")==0?second:first;

}
int main()
{
    return yyparse();
}

void yyerror( const char*  s ) 
{
    errorSyn(yylineno);
}